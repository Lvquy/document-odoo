Remove nginx on ubuntu server

sudo apt-get remove nginx nginx-common
Removes everything.

sudo apt-get purge nginx nginx-common
After using any of the above commands, use this in order to remove dependencies used by nginx which are no longer required.

sudo apt-get autoremove


--------
remove apache2

$ sudo service apache2 stop
$ sudo apt-get purge apache2 apache2-utils apache2.2-bin apache2-common
$ sudo apt-get autoremove
$ whereis apache2
apache2: /etc/apache2
$ sudo rm -rf /etc/apache2


-------------
install odoo 15 on ubuntu 22/20

sudo apt update -y && apt upgrade -y

sudo apt install python3-pip  wget python3-dev python3-venv python3-wheel libxml2-dev libpq-dev libjpeg8-dev liblcms2-dev libxslt1-dev zlib1g-dev libsasl2-dev libldap2-dev build-essential git libssl-dev libffi-dev libmysqlclient-dev libjpeg-dev libblas-dev libatlas-base-dev -y

*PostgreSQL
sudo apt install postgresql -y
sudo su - postgres -c "createuser -s odoo15"
*create system user
sudo useradd -m -d /opt/odoo15 -U -r -s /bin/bash odoo15
*wkhtmltopdf
sudo apt-get install wkhtmltopdf -y
*check version
wkhtmltopdf --version

*Odoo 15
*switch to user:
su - odoo15
*download odoo from git
git clone https://www.github.com/odoo/odoo --depth 1 --branch 15.0 /opt/odoo15/odoo

cd /opt/odoo15
* create venv
python3 -m venv myodoo15-venv
* active venv
source myodoo15-venv/bin/activate
*install lib for venv
pip3 install wheel
pip3 install -r odoo/requirements.txt
*exit venv
deactivate

* create folder custom module
mkdir /opt/odoo15/custom-addons

*exit user odoo15
exit

*create odoo config file
sudo nano /etc/odoo15.conf
*************************** add code below, and change admin_password
[options]
; This is the password that allows database operations:
admin_passwd = admin_password
db_host = False
db_port = False
db_user = odoo15
db_password = False
xmlrpc_port = 8069
logfile = /var/log/odoo15/odoo.log
addons_path = /opt/odoo15/odoo/addons,/opt/odoo15/custom-addons
*************************

* create log file
mkdir /var/log/odoo15
chown odoo15:root /var/log/odoo15

*create service odoo15
sudo nano /etc/systemd/system/odoo15.service
******************** add code below
[Unit]
Description=Odoo15
Requires=postgresql.service
After=network.target postgresql.service

[Service]
Type=simple
SyslogIdentifier=odoo15
PermissionsStartOnly=true
User=odoo15
Group=odoo15
ExecStart=/opt/odoo15/myodoo15-venv/bin/python3 /opt/odoo15/odoo/odoo-bin -c /etc/odoo15.conf
StandardOutput=journal+console

[Install]
WantedBy=multi-user.target

****************************

sudo systemctl daemon-reload
sudo systemctl enable --now odoo15

* check status odoo15
sudo systemctl status odoo15

* goto localhost:8069






--------------
Set up Nginx as a reverse proxy with HTTPS (Let’s Encrypt)

apt-get install nginx python3-certbot-nginx
systemctl start nginx
systemctl enable nginx

* edit odoo conf file 
nano /etc/odoo/odoo.conf

*add line: 
	proxy_mode = True

nano /etc/nginx/conf.d/odoo.conf

--------------------------
upstream odoo {
server 127.0.0.1:8069;
}

server {
listen 80;
server_name odoo.thishosting.rocks;
root /usr/share/nginx/html;
index index.html index.htm;
access_log /var/log/nginx/odoo-odoo.thishosting.rocks-local.access.log;
error_log /var/log/nginx/odoo-odoo.thishosting.rocks-local.error.log;

location / {
proxy_pass http://odoo;
# force timeouts if the backend dies
proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
proxy_redirect off;

# set headers
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto https;
}

# cache some static data in memory for 60mins
location ~* /web/static/ {
proxy_cache_valid 200 60m;
proxy_buffering on;
expires 864000;
proxy_pass http://odoo;
}
}

---------------

*check systax

nginx -t
systemctl restart nginx

--------SSL----------
certbot --nginx -d odoo.thishosting.rocks

*>>>> Follow the self-explanatory prompts. Make sure you let certbot set up http to https redirection (option 2)

If you’re using a firewall, make sure you allow the ports for https with the following

ufw allow 'Nginx Full'
ufw reload
